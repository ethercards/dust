/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DustForPunksAllocatorMock,
  DustForPunksAllocatorMockInterface,
} from "../DustForPunksAllocatorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc721",
        type: "address",
      },
      {
        internalType: "address",
        name: "_erc20",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
    ],
    name: "Redeemed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
    ],
    name: "Skipped",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "cardTypeAmounts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "erc721",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16[]",
        name: "_tokenIds",
        type: "uint16[]",
      },
    ],
    name: "getAvailableBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_tokenId",
        type: "uint16",
      },
    ],
    name: "getCardTypeFromId",
    outputs: [
      {
        internalType: "uint8",
        name: "_cardType",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_page",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "_perPage",
        type: "uint16",
      },
    ],
    name: "getUsedTokenData",
    outputs: [
      {
        internalType: "uint8[]",
        name: "",
        type: "uint8[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_position",
        type: "uint16",
      },
    ],
    name: "isTokenUsed",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "locked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16[]",
        name: "_tokenIds",
        type: "uint16[]",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeUnlockTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tracker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "retrieve721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tracker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "retrieveERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_block_timestamp",
        type: "uint256",
      },
    ],
    name: "setBlockTimestamp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleLocked",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001db438038062001db4833981810160405281019062000037919062000210565b818160006200004b620001f160201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555069152d02c7e14af680000060016000600160ff1681526020019081526020016000208190555069021e19e0c9bab240000060016000600260ff16815260200190815260200160002081905550683635c9adc5dea0000060016000600360ff1681526020019081526020016000208190555063615afad0600581905550505050506200029f565b600033905090565b6000815190506200020a8162000285565b92915050565b600080604083850312156200022457600080fd5b60006200023485828601620001f9565b92505060206200024785828601620001f9565b9150509250929050565b60006200025e8262000265565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002908162000251565b81146200029c57600080fd5b50565b611b0580620002af6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063796b89b9116100ad578063c9c2c57011610071578063c9c2c570146102be578063cf309012146102ee578063da90e8b71461030c578063e0abdf661461033c578063f2fde38b1461035857610121565b8063796b89b91461022c578063854d5a4e1461024a5780638da5cb5b14610266578063a5b3abfb14610284578063bca6ce64146102a057610121565b806347a8aa90116100f457806347a8aa901461019a57806351328984146101ca578063715018a6146101d457806376d76d3b146101de578063785e9e861461020e57610121565b806301b11792146101265780630d1bc6311461013057806317fd1e2f14610160578063251c1aa31461017c575b600080fd5b61012e610374565b005b61014a6004803603810190610145919061145c565b61044f565b60405161015791906117bc565b60405180910390f35b61017a600480360381019061017591906113b2565b6104f5565b005b610184610636565b60405161019191906118c3565b60405180910390f35b6101b460048036038101906101af919061145c565b61063c565b6040516101c191906118de565b60405180910390f35b6101d261070a565b005b6101dc6107c2565b005b6101f860048036038101906101f391906114d7565b61092f565b604051610205919061179a565b60405180910390f35b6102166109de565b60405161022391906117d7565b60405180910390f35b610234610a04565b60405161024191906118c3565b60405180910390f35b610264600480360381019061025f91906113ee565b610a0e565b005b61026e610d4c565b60405161027b919061171f565b60405180910390f35b61029e600480360381019061029991906113b2565b610d75565b005b6102a8610e97565b6040516102b591906117f2565b60405180910390f35b6102d860048036038101906102d391906114ae565b610ebd565b6040516102e591906118c3565b60405180910390f35b6102f6610ed5565b60405161030391906117bc565b60405180910390f35b610326600480360381019061032191906113ee565b610ee8565b60405161033391906118c3565b60405180910390f35b61035660048036038101906103519190611485565b610f7f565b005b610372600480360381019061036d9190611360565b610f89565b005b61037c61117b565b73ffffffffffffffffffffffffffffffffffffffff1661039a610d4c565b73ffffffffffffffffffffffffffffffffffffffff1614610423576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600460149054906101000a900460ff1615600460146101000a81548160ff021916908315150217905550565b60008060088361ffff168161046057fe5b049050600060088202840360ff1690506000600260008461ffff1661ffff16815260200190815260200160002060009054906101000a900460ff1660ff1614156104af576000925050506104f0565b60008161ffff1660020a600102600260008561ffff1661ffff16815260200190815260200160002060009054906101000a900460ff1660ff16161415925050505b919050565b6104fd61117b565b73ffffffffffffffffffffffffffffffffffffffff1661051b610d4c565b73ffffffffffffffffffffffffffffffffffffffff16146105a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016105df92919061173a565b602060405180830381600087803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190611433565b505050565b60055481565b6000600a8261ffff161015610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d9061180d565b60405180910390fd5b60648261ffff16101561069c5760019050610705565b6103e88261ffff1610156106b35760029050610705565b6127108261ffff1610156106ca5760039050610705565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fc9061184d565b60405180910390fd5b919050565b61071261117b565b73ffffffffffffffffffffffffffffffffffffffff16610730610d4c565b73ffffffffffffffffffffffffffffffffffffffff16146107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b42600581905550565b6107ca61117b565b73ffffffffffffffffffffffffffffffffffffffff166107e8610d4c565b73ffffffffffffffffffffffffffffffffffffffff1614610871576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606060088261ffff168161093f57fe5b04915060008360ff168302905060008382019050600060608581525b8261ffff168461ffff1610156109cd57600260008561ffff1661ffff16815260200190815260200160002060009054906101000a900460ff16818361ffff16815181106109a457fe5b602002602001019060ff16908160ff16815250508180600101925050838060010194505061095b565b596040528094505050505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600654905090565b600460149054906101000a900460ff16158015610a335750600554610a31610a04565b115b610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a699061182d565b60405180910390fd5b600080600090505b838390508160ff161015610c9657600084848360ff16818110610a9957fe5b9050602002016020810190610aae919061145c565b90503373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610b2291906118a8565b60206040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190611389565b73ffffffffffffffffffffffffffffffffffffffff1614610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf9061186d565b60405180910390fd5b610bd18161044f565b610c5057610c0960016000610be58461063c565b60ff1660ff168152602001908152602001600020548461118390919063ffffffff16565b9250610c148161120b565b7f8357b7cc123a6e8fe3739217d8a978c9ce32211b7ffe2799cf67dd211ed93ce081604051610c43919061188d565b60405180910390a1610c88565b7f0af875050dac9daa78c864b492f6180ca5886897dc0421e62dbded38509d1e6f81604051610c7f919061188d565b60405180910390a15b508080600101915050610a7a565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610cf492919061173a565b602060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d469190611433565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d7d61117b565b73ffffffffffffffffffffffffffffffffffffffff16610d9b610d4c565b73ffffffffffffffffffffffffffffffffffffffff1614610e24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610e6193929190611763565b600060405180830381600087803b158015610e7b57600080fd5b505af1158015610e8f573d6000803e3d6000fd5b505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b600460149054906101000a900460ff1681565b600080600090505b838390508160ff161015610f7857600084848360ff16818110610f0f57fe5b9050602002016020810190610f24919061145c565b9050610f2f8161044f565b610f6a57610f6760016000610f438461063c565b60ff1660ff168152602001908152602001600020548461118390919063ffffffff16565b92505b508080600101915050610ef0565b5092915050565b8060068190555050565b610f9161117b565b73ffffffffffffffffffffffffffffffffffffffff16610faf610d4c565b73ffffffffffffffffffffffffffffffffffffffff1614611038576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611aaa6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600080828401905083811015611201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600060088261ffff168161121b57fe5b049050600060088202830360ff1690508061ffff1660020a600260008461ffff1661ffff16815260200190815260200160002060009054906101000a900460ff1660ff1617600260008461ffff1661ffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550505050565b6000813590506112a781611a36565b92915050565b6000815190506112bc81611a36565b92915050565b60008083601f8401126112d457600080fd5b8235905067ffffffffffffffff8111156112ed57600080fd5b60208301915083602082028301111561130557600080fd5b9250929050565b60008151905061131b81611a4d565b92915050565b60008135905061133081611a64565b92915050565b60008135905061134581611a7b565b92915050565b60008135905061135a81611a92565b92915050565b60006020828403121561137257600080fd5b600061138084828501611298565b91505092915050565b60006020828403121561139b57600080fd5b60006113a9848285016112ad565b91505092915050565b600080604083850312156113c557600080fd5b60006113d385828601611298565b92505060206113e485828601611336565b9150509250929050565b6000806020838503121561140157600080fd5b600083013567ffffffffffffffff81111561141b57600080fd5b611427858286016112c2565b92509250509250929050565b60006020828403121561144557600080fd5b60006114538482850161130c565b91505092915050565b60006020828403121561146e57600080fd5b600061147c84828501611321565b91505092915050565b60006020828403121561149757600080fd5b60006114a584828501611336565b91505092915050565b6000602082840312156114c057600080fd5b60006114ce8482850161134b565b91505092915050565b600080604083850312156114ea57600080fd5b60006114f88582860161134b565b925050602061150985828601611321565b9150509250929050565b600061151f8383611701565b60208301905092915050565b611534816119a6565b82525050565b61154381611943565b82525050565b600061155482611909565b61155e8185611921565b9350611569836118f9565b8060005b8381101561159a5781516115818882611513565b975061158c83611914565b92505060018101905061156d565b5085935050505092915050565b6115b081611955565b82525050565b6115bf816119b8565b82525050565b6115ce816119dc565b82525050565b60006115e1601483611932565b91507f4361726454797065206e6f7420616c6c6f7765640000000000000000000000006000830152602082019050919050565b6000611621600f83611932565b91507f436f6e7472616374206c6f636b656400000000000000000000000000000000006000830152602082019050919050565b6000611661601283611932565b91507f4361726454797065206e6f7420666f756e6400000000000000000000000000006000830152602082019050919050565b60006116a1601a83611932565b91507f4552433732313a206e6f74206f776e6572206f6620746f6b656e0000000000006000830152602082019050919050565b6116dd81611961565b82525050565b6116ec81611a24565b82525050565b6116fb8161198f565b82525050565b61170a81611999565b82525050565b61171981611999565b82525050565b6000602082019050611734600083018461153a565b92915050565b600060408201905061174f600083018561152b565b61175c60208301846116f2565b9392505050565b6000606082019050611778600083018661153a565b611785602083018561152b565b61179260408301846116f2565b949350505050565b600060208201905081810360008301526117b48184611549565b905092915050565b60006020820190506117d160008301846115a7565b92915050565b60006020820190506117ec60008301846115b6565b92915050565b600060208201905061180760008301846115c5565b92915050565b60006020820190508181036000830152611826816115d4565b9050919050565b6000602082019050818103600083015261184681611614565b9050919050565b6000602082019050818103600083015261186681611654565b9050919050565b6000602082019050818103600083015261188681611694565b9050919050565b60006020820190506118a260008301846116d4565b92915050565b60006020820190506118bd60008301846116e3565b92915050565b60006020820190506118d860008301846116f2565b92915050565b60006020820190506118f36000830184611710565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061194e8261196f565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006119b182611a00565b9050919050565b60006119c3826119ca565b9050919050565b60006119d58261196f565b9050919050565b60006119e7826119ee565b9050919050565b60006119f98261196f565b9050919050565b6000611a0b82611a12565b9050919050565b6000611a1d8261196f565b9050919050565b6000611a2f82611961565b9050919050565b611a3f81611943565b8114611a4a57600080fd5b50565b611a5681611955565b8114611a6157600080fd5b50565b611a6d81611961565b8114611a7857600080fd5b50565b611a848161198f565b8114611a8f57600080fd5b50565b611a9b81611999565b8114611aa657600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a264697066735822122069b6fe525852773d6ca82915e3a29534e5269c6226644edaed7936740aa034b464736f6c63430007050033";

export class DustForPunksAllocatorMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _erc721: string,
    _erc20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DustForPunksAllocatorMock> {
    return super.deploy(
      _erc721,
      _erc20,
      overrides || {}
    ) as Promise<DustForPunksAllocatorMock>;
  }
  getDeployTransaction(
    _erc721: string,
    _erc20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_erc721, _erc20, overrides || {});
  }
  attach(address: string): DustForPunksAllocatorMock {
    return super.attach(address) as DustForPunksAllocatorMock;
  }
  connect(signer: Signer): DustForPunksAllocatorMock__factory {
    return super.connect(signer) as DustForPunksAllocatorMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DustForPunksAllocatorMockInterface {
    return new utils.Interface(_abi) as DustForPunksAllocatorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DustForPunksAllocatorMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DustForPunksAllocatorMock;
  }
}
