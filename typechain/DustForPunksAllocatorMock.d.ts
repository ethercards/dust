/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DustForPunksAllocatorMockInterface extends ethers.utils.Interface {
  functions: {
    "cardTypeAmounts(uint8)": FunctionFragment;
    "erc20()": FunctionFragment;
    "erc721()": FunctionFragment;
    "getAvailableBalance(uint16[])": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getCardTypeFromId(uint16)": FunctionFragment;
    "getUsedTokenData(uint8,uint16)": FunctionFragment;
    "isTokenUsed(uint16)": FunctionFragment;
    "locked()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeem(uint16[])": FunctionFragment;
    "removeUnlockTime()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrieve721(address,uint256)": FunctionFragment;
    "retrieveERC20(address,uint256)": FunctionFragment;
    "setBlockTimestamp(uint256)": FunctionFragment;
    "toggleLocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cardTypeAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc721", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCardTypeFromId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsedTokenData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieve721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cardTypeAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardTypeFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsedTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieve721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Redeemed(uint16)": EventFragment;
    "Skipped(uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Skipped"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RedeemedEvent = TypedEvent<[number] & { tokenId: number }>;

export type SkippedEvent = TypedEvent<[number] & { tokenId: number }>;

export class DustForPunksAllocatorMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DustForPunksAllocatorMockInterface;

  functions: {
    cardTypeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    erc721(overrides?: CallOverrides): Promise<[string]>;

    getAvailableBalance(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCardTypeFromId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { _cardType: number }>;

    getUsedTokenData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    isTokenUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUnlockTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockTimestamp(
      _block_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cardTypeAmounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  erc20(overrides?: CallOverrides): Promise<string>;

  erc721(overrides?: CallOverrides): Promise<string>;

  getAvailableBalance(
    _tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getCardTypeFromId(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getUsedTokenData(
    _page: BigNumberish,
    _perPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  isTokenUsed(
    _position: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUnlockTime(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieve721(
    _tracker: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveERC20(
    _tracker: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockTimestamp(
    _block_timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleLocked(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cardTypeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<string>;

    erc721(overrides?: CallOverrides): Promise<string>;

    getAvailableBalance(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getCardTypeFromId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getUsedTokenData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    isTokenUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(_tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    removeUnlockTime(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockTimestamp(
      _block_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleLocked(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Redeemed(uint16)"(
      tokenId?: null
    ): TypedEventFilter<[number], { tokenId: number }>;

    Redeemed(tokenId?: null): TypedEventFilter<[number], { tokenId: number }>;

    "Skipped(uint16)"(
      tokenId?: null
    ): TypedEventFilter<[number], { tokenId: number }>;

    Skipped(tokenId?: null): TypedEventFilter<[number], { tokenId: number }>;
  };

  estimateGas: {
    cardTypeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    erc721(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableBalance(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getCardTypeFromId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsedTokenData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUnlockTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockTimestamp(
      _block_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cardTypeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableBalance(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCardTypeFromId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsedTokenData(
      _page: BigNumberish,
      _perPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenUsed(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUnlockTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockTimestamp(
      _block_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
