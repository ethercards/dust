/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC777Sender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Sender__factory>;
    getContractFactory(
      name: "DustForPunksAllocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DustForPunksAllocator__factory>;
    getContractFactory(
      name: "DustToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DustToken__factory>;
    getContractFactory(
      name: "DustForPunksAllocatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DustForPunksAllocatorMock__factory>;
    getContractFactory(
      name: "ERC777SenderRecipientMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777SenderRecipientMock__factory>;
    getContractFactory(
      name: "ERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777__factory>;
    getContractFactory(
      name: "ERC20Toolbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Toolbox__factory>;
    getContractFactory(
      name: "ERC777ToolBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777ToolBox__factory>;
    getContractFactory(
      name: "NFTToolbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTToolbox__factory>;
    getContractFactory(
      name: "TestNetERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNetERC721__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820Implementer>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Implementer>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777>;
    getContractAt(
      name: "IERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC777Sender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Sender>;
    getContractAt(
      name: "DustForPunksAllocator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DustForPunksAllocator>;
    getContractAt(
      name: "DustToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DustToken>;
    getContractAt(
      name: "DustForPunksAllocatorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DustForPunksAllocatorMock>;
    getContractAt(
      name: "ERC777SenderRecipientMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777SenderRecipientMock>;
    getContractAt(
      name: "ERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777>;
    getContractAt(
      name: "ERC20Toolbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Toolbox>;
    getContractAt(
      name: "ERC777ToolBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777ToolBox>;
    getContractAt(
      name: "NFTToolbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTToolbox>;
    getContractAt(
      name: "TestNetERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNetERC721>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
